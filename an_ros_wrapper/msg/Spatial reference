Header
	# Standard metadata for higher-level stamped data types.
	# This is generally used to communicate timestamped data 
	# in a particular coordinate frame.
	# 
	# sequence ID: consecutively increasing ID 
	uint32 seq
	#Two-integer timestamp that is expressed as:
	# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
	# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
	# time-handling sugar is provided by the client library
	time stamp
	#Frame this data is associated with
	# 0: no frame
	# 1: global frame
	string frame_id

Imu
	# This is a message to hold data from an IMU (Inertial Measurement Unit)
	#
	# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec
	#
	# If the covariance of the measurement is known, it should be filled in (if all you know is the 
	# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)
	# A covariance matrix of all zeros will be interpreted as "covariance unknown", and to use the
	# data a covariance will have to be assumed or gotten from some other source
	#
	# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation 
	# estimate), please set element 0 of the associated covariance matrix to -1
	# If you are interpreting this message, please check for a value of -1 in the first element of each 
	# covariance matrix, and disregard the associated estimate.

	Header header

	geometry_msgs/Quaternion orientation
	float64[9] orientation_covariance # Row major about x, y, z axes

	geometry_msgs/Vector3 angular_velocity
	float64[9] angular_velocity_covariance # Row major about x, y, z axes

	geometry_msgs/Vector3 linear_acceleration
	float64[9] linear_acceleration_covariance # Row major x, y z 

NavSatFix
	# Navigation Satellite fix for any Global Navigation Satellite System
	#
	# Specified using the WGS 84 reference ellipsoid

	# header.stamp specifies the ROS time for this measurement (the
	#        corresponding satellite time may be reported using the
	#        sensor_msgs/TimeReference message).
	#
	# header.frame_id is the frame of reference reported by the satellite
	#        receiver, usually the location of the antenna.  This is a
	#        Euclidean frame relative to the vehicle, not a reference
	#        ellipsoid.
	Header header

	# satellite fix status information
	NavSatStatus status

	# Latitude [degrees]. Positive is north of equator; negative is south.
	float64 latitude

	# Longitude [degrees]. Positive is east of prime meridian; negative is west.
	float64 longitude

	# Altitude [m]. Positive is above the WGS 84 ellipsoid
	# (quiet NaN if no altitude is available).
	float64 altitude

	# Position covariance [m^2] defined relative to a tangential plane
	# through the reported position. The components are East, North, and
	# Up (ENU), in row-major order.
	#
	# Beware: this coordinate system exhibits singularities at the poles.

	float64[9] position_covariance

	# If the covariance of the fix is known, fill it in completely. If the
	# GPS receiver provides the variance of each measurement, put them
	# along the diagonal. If only Dilution of Precision is available,
	# estimate an approximate covariance from that.

	uint8 COVARIANCE_TYPE_UNKNOWN = 0
	uint8 COVARIANCE_TYPE_APPROXIMATED = 1
	uint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2
	uint8 COVARIANCE_TYPE_KNOWN = 3

	uint8 position_covariance_type

NavSatStatus
	# Navigation Satellite fix status for any Global Navigation Satellite System

	# Whether to output an augmented fix is determined by both the fix
	# type and the last time differential corrections were received.  A
	# fix is valid when status >= STATUS_FIX.

	int8 STATUS_NO_FIX =  -1        # unable to fix position
	int8 STATUS_FIX =      0        # unaugmented fix
	int8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation
	int8 STATUS_GBAS_FIX = 2        # with ground-based augmentation

	int8 status

	# Bits defining which Global Navigation Satellite System signals were
	# used by the receiver.

	uint16 SERVICE_GPS =     1
	uint16 SERVICE_GLONASS = 2
	uint16 SERVICE_COMPASS = 4      # includes BeiDou.
	uint16 SERVICE_GALILEO = 8

	uint16 service

Temperature
	float64 temperature
	float64 variance

TimeReference
	time time_ref
	string source

FluidPressure
	float64 fluid_pressure
	float64 variance