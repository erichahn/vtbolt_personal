/*
* Advanced Navigation Spatial GPS aided Inertial Navigation System and Attitude and Heading Reference System
* Eric L. Hahn <erichahn@vt.edu>
* 5/18/2016
* Copyright 2016. All Rights Reserved.
*/
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wshadow"
#include "ros/ros.h"
#include "std_msgs/String.h"
// #include <tf/tf.h>
// #include <pluginlib/class_loader.h>
#pragma GCC diagnostic pop

// #include <sensor_msgs/Temperature.h>
// #include <sensor_msgs/Imu.h>
// #include <boost/circular_buffer.hpp>
// #include <sched.h>

namespace
{
const std::string DefaultImuLink = "chassis";
const std::string DefaultAddress = "/dev/ttyUSB0";
int Rate;
bool IsDA = true;
double Ahrs_gyro_x = 0;
double Ahrs_gyro_y = 0;
double Ahrs_gyro_z = 0;
double Prev_stamp = 0;
}

/*
* Convert SpatialMessage to a standard ROS message
* for all appropriate data
*/

// void to_ros(const sensor_msgs::Imu& imu, sensor_msgs:: Temperature& temp)
// {
//  msg.time(imu.header.stamp.sec, imu.header.stamp.nsec);
//  imu.angular_velocity.x = msg.
// }

int main(int argc, char **argv)
{
  //Name of node
  ros::init(argc, argv, "an_spatial_ins");
  //Node handle
  ros::NodeHandle nh("~");
  ros::Publisher raw_pub = nh.advertise<std_msgs::String>("ahrs", 1);
  std::string test = "Hello, World!";

  nh.param("rate", Rate, 10);

  // ros::Publisher imu_pub = nh.advertise<sensor_msgs::Imu>("imu", 1);
  // ros::Publisher temp_pub = nh.advertise<sensor_msgs::Temperature>("temp", 1);

  while (ros::ok())
  {
    raw_pub.publish(test);
    ros::spinOnce();
  }

  return 0;
}